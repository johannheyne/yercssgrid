// YerCSSGrid

// GENERATOR ( Version 1.1 ) {

    .mix-grid-clear() {

      &:after {

        content: "";
            display: table;
            clear: both;
      }
    }
    .mix-grid-border-box () {

      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }

    .grid {
        font-size: 0;
        > * {
            display: inline-block;
            width: 100%;
            vertical-align: top;
            font-size: @col-default-font-size;
        }
        .mix-grid-clear();
    }

    .grid.colreverse {
        direction: rtl;
        > * {
            direction: ltr;
            text-align: left;
        }
    }

    .loopEachBreakpoint( @breackpoint ) {

        .loopGap (@index) when (@index > -1)  and ( @grid-use-gaps = yes ){

            .grid.gap-@{breackpoint}-@{index} {
                margin-left: -@index / 2px;
                margin-right: -@index / 2px;
            }
            .grid.gap-@{breackpoint}-@{index} {
                > * {
                    padding-left: @index / 2px;
                    padding-right: @index / 2px;
                }
            }
            .loopGap(@index - @grid-gap-step);
        }
        .loopGap (0) {}
        .loopGap (@grid-gap-max);

        .loopCols (@index) when (@index > 0) and (@grid-use-cols = yes) {
            .col-@{breackpoint}-@{index} {

                @x: 100 / @grid-cols * @index;
                width: ~"@{x}%";
            }
            .loopCols(@index - 1);
        }
        .loopCols (0) {}
        .loopCols (@grid-cols);

        .loopColsPush (@index) when (@index > 0) and (@grid-use-cols-push = yes) {
            .push-@{breackpoint}-@{index} {

                @x: 100 / @grid-cols * @index;

                margin-left: ~"@{x}%";
            }
            .loopColsPush(@index - 1);
        }
        .loopColsPush (0) {}
        .loopColsPush (@grid-cols);

        .loopColsPull (@index) when (@index > 0) and (@grid-use-cols-pull = yes) {
            .pull-@{breackpoint}-@{index} {

                @x: 100 / @grid-cols * @index;

                margin-right: ~"@{x}%";
            }

            .loopColsPull(@index - 1);
        }
        .loopColsPull (0) {}
        .loopColsPull (@grid-cols);

        .loopPerc (@index) when (@index > 0) and (@grid-use-perc = yes) {
            .perc-@{breackpoint}-@{index} {
                width: ~"@{index}%";
            }
            .loopPerc(@index - @grid-perc-step);
        }
        .loopPerc (0) {}
        .loopPerc (100);

        .loopPercPush (@index) when (@index > 0) and (@grid-use-perc-push = yes) {
            .perc-@{breackpoint}-push-@{index} {
                margin-left: ~"@{index}%";
            }
            .loopPercPush(@index - @grid-perc-step);
        }
        .loopPercPush (0) {}
        .loopPercPush (100);

        .loopPercPull (@index) when (@index > 0) and (@grid-use-perc-pull = yes) {
            .perc-@{breackpoint}-pull-@{index} {
                margin-right: ~"-@{index}%";
            }

            .loopPercPull(@index - @grid-perc-step);
        }
        .loopPercPull (0) {}
        .loopPercPull (100);

        .loopTextAlignInherit () when ( @grid-use-text-align-inherit = yes ) {
            .text-align-inherit-@{breackpoint} {
                text-align: inherit !important;
            }
        }
        .loopTextAlignInherit ();

        .loopSpace (@index) when (@index > -1) and (@grid-use-top-bottom = yes) {
            .top-@{breackpoint}-@{index} {
                margin-top: ~"@{index}px";
            }
            .bottom-@{breackpoint}-@{index} {
                margin-bottom: ~"@{index}px";
            }
            .loopSpace(@index - @grid-top-bottom-step);
        }
        .loopSpace (@grid-top-bottom-min) {}
        .loopSpace (@grid-top-bottom-max);


        .hide-@{breackpoint} when ( @grid-use-display = yes ) {
            display: none;
        }
        .show-@{breackpoint} when ( @grid-use-display = yes ) {
            display: inline-block;
        }
    }

    .loopEachBreakpointBase() when ( @grid-use-breackpoint-0 = yes ) {

        .loopEachBreakpoint( 0 );
    }
    .loopEachBreakpointBase();

    .loopBreakpoint (@breackpoint) when (@breackpoint < ( @grid-breackpoint-max + 1 ) ) and (@grid-use-breackpoints = yes) {

        @media screen and (~"min-width: @{breackpoint}px") {

            .loopEachBreakpoint( @breackpoint );
        }
        .loopBreakpoint(@breackpoint + @grid-breackpoint-step);
    }
    .loopBreakpoint (@grid-breackpoint-max) {}
    .loopBreakpoint (@grid-breackpoint-min);

// GENERATOR }