// Setup


@grid-use-breackpoint-0: yes;
@grid-use-breackpoints: yes;
@grid-breackpoint-step: 100;
@grid-breackpoint-min: 300;
@grid-breackpoint-max: 1000;

@grid-use-gaps: yes;
@grid-gap-step: 10;
@grid-gap-max: 20;

@grid-use-cols: yes;
@grid-use-cols-push: yes;
@grid-use-cols-pull: yes;
@grid-cols: 12;

@grid-use-perc: no;
@grid-use-perc-push: no;
@grid-use-perc-pull: no;
@grid-perc-step: 10;





// Generator

.mix-grid-clear() {
		
  &:after {
		
    content: "";
		display: table;
		clear: both;
  }
}
.mix-grid-border-box () {
  
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.grid {
	
	> * {
		float: left;
		display: block;
		width: 100%;
	}
	.mix-grid-clear();
}

.colreverse {
  > * {
    float: right;
  }
}

.loopEachBreakpoint( @breackpoint ) {
	
	.loopGap (@index) when (@index > -1)  and ( @grid-use-gaps = yes ){

		.grid.gap-@{breackpoint}-@{index} {
			margin-left: -@index / 2px;
			margin-right: -@index / 2px;
		}
		.grid.gap-@{breackpoint}-@{index} {
			> * {
				padding-left: @index / 2px;
				padding-right: @index / 2px;
			}
		}
		.loopGap(@index - @grid-gap-step);
	}
	.loopGap (0) {}
	.loopGap (@grid-gap-max);

	
	.loopCols (@index) when (@index > 0) and (@grid-use-cols = yes) {
		.col-@{breackpoint}-@{index} {

			@x: 100 / @grid-cols * @index;
			width: ~"@{x}%";
		}
		.loopCols(@index - 1);
	}
	.loopCols (0) {}
	.loopCols (@grid-cols);

	.loopColsPush (@index) when (@index > 0) and (@grid-use-cols-push = yes) {
		.col-@{breackpoint}-push-@{index} {
	
			@x: 100 / @grid-cols * @index;
	
			margin-left: ~"@{x}%";
		}
		.loopColsPush(@index - 1);
	}
	.loopColsPush (0) {}
	.loopColsPush (@grid-cols);

	.loopColsPull (@index) when (@index > 0) and (@grid-use-cols-pull = yes) {
	 	.col-@{breackpoint}-pull-@{index} {
	
			@x: 100 / @grid-cols * @index;
	
			margin-right: ~"@{x}%";
		}

		.loopColsPull(@index - 1);
	}
	.loopColsPull (0) {}
	.loopColsPull (@grid-cols);

	.loopPerc (@index) when (@index > 0) and (@grid-use-perc = yes) {
		.perc-@{breackpoint}-@{index} {
			width: ~"@{index}%";
		}
		.loopPerc(@index - @grid-perc-step);
	}
	.loopPerc (0) {}
	.loopPerc (100);

	.loopPercPush (@index) when (@index > 0) and (@grid-use-perc-push = yes) {
		.perc-@{breackpoint}-push-@{index} {
			margin-left: ~"@{index}%";
		}
		.loopPercPush(@index - @grid-perc-step);
	}
	.loopPercPush (0) {}
	.loopPercPush (100);

	.loopPercPull (@index) when (@index > 0) and (@grid-use-perc-pull = yes) {
	 	.perc-@{breackpoint}-pull-@{index} {
			margin-right: ~"-@{index}%";
		}

		.loopPercPull(@index - @grid-perc-step);
	}
	.loopPercPull (0) {}
	.loopPercPull (100);
}

.loopEachBreakpointBase() when ( @grid-use-breackpoint-0 = yes ) {
	
	.loopEachBreakpoint( 0 );
}
.loopEachBreakpointBase();

.loopBreakpoint (@breackpoint) when (@breackpoint < ( @grid-breackpoint-max + 1 ) ) and (@grid-use-breackpoints = yes) {
	
	@media screen and (~"min-width: @{breackpoint}px") {
	
		.loopEachBreakpoint( @breackpoint );
	}
	.loopBreakpoint(@breackpoint + @grid-breackpoint-step);
}
.loopBreakpoint (@grid-breackpoint-max) {}
.loopBreakpoint (@grid-breackpoint-min);


// Helper

.grid-border( @selector, @border-size, @border-style, @border-color) {
	
	/*
	.grid-border {
		border-bottom: 1px solid #999;
		border-left: 1px solid #999;
		border-top: none;
		border-right: none;
		margin-bottom: 10px;
	}
	.grid-border > * {
		border-right: 1px solid #999;
		border-top: 1px solid #999;
		border-bottom: 1px solid #999;
		margin-bottom: -1px;
	}
	.grid-border > * > * {
		margin-bottom: 0;
	}
	*/
	
	.@{selector} {
		border-bottom: @border-size @border-style @border-color;
		border-left: @border-size @border-style @border-color;
		border-top: none;
		border-right: none;
		margin-bottom: 10px;
	}
	.@{selector} > * {
		border-right: @border-size @border-style @border-color;
		border-top: @border-size @border-style @border-color;
		border-bottom: @border-size @border-style @border-color;
		margin-bottom: ~"-@{border-size}";
	}
	.@{selector} > * > * {
		margin-bottom: 0;
	}
	
}